
var dataError = {};
function send_contact_request() {
    var username = jQuery("#username");
    var emailid = jQuery("#emailid");
    var mobile = jQuery("#mobile");
    var address1 = jQuery("#address1");

    if(username.val() == ''){
		dataError['username'] = 1;
		username.addClass('error');
	}else{
        dataError['username'] = 0;
		username.removeClass('error');
	}
    if(emailid.val() == ''){
		dataError['emailid'] = 1;
		emailid.addClass('error');
	}else{
        dataError['emailid'] = 0;
		emailid.removeClass('error');
    }
    
    if(mobile.val() == ''){
		dataError['mobile'] = 1;
		mobile.addClass('error');
	}else{
        dataError['mobile'] = 0;
		mobile.removeClass('error');
    }
    if(address1.val() == ''){
		dataError['address1'] = 1;
		address1.addClass('error');
	}else{
        dataError['address1'] = 0;
		address1.removeClass('error');
    }
    

    var error_count = 0;
	jQuery.each(dataError,function(index,key){
		error_count = error_count + key;
    });

    console.log(error_count);
    if(error_count == 0){
      
    }
}
    



function initMap() {
    // var map = new google.maps.Map(document.getElementById('map'), {
    //   center: {lat: -33.8688, lng: 151.2195},
    //   zoom: 13
    // });
    var card = document.getElementById('pac-card');
    var input = document.getElementById('find-providers');
    var types = document.getElementById('type-selector');
    var strictBounds = document.getElementById('strict-bounds-selector');

    // map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

    var autocomplete = new google.maps.places.Autocomplete(input);

    // Bind the map's bounds (viewport) property to the autocomplete object,
    // so that the autocomplete requests use the current map bounds for the
    // bounds option in the request.
    // autocomplete.bindTo('bounds', map);

    // Set the data fields to return when the user selects a place.
    autocomplete.setFields(
        ['address_components', 'geometry', 'icon', 'name']);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
    //   map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace();
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and
        // pressed the Enter key, or the Place Details request failed.
        window.alert("No details available for input: '" + place.name + "'");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17);  // Why 17? Because it looks good.
      }
      marker.setPosition(place.geometry.location);
      marker.setVisible(true);

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      infowindowContent.children['place-icon'].src = place.icon;
      infowindowContent.children['place-name'].textContent = place.name;
      infowindowContent.children['place-address'].textContent = address;
      infowindow.open(map, marker);
    });

    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
      var radioButton = document.getElementById(id);
      radioButton.addEventListener('click', function() {
        autocomplete.setTypes(types);
      });
    }

    // setupClickListener('changetype-all', []);
    // setupClickListener('changetype-address', ['address']);
    // setupClickListener('changetype-establishment', ['establishment']);
    // setupClickListener('changetype-geocode', ['geocode']);

    // document.getElementById('use-strict-bounds')
    //     .addEventListener('click', function() {
    //       console.log('Checkbox clicked! New state=' + this.checked);
    //       autocomplete.setOptions({strictBounds: this.checked});
    //     });
  }